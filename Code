
class Breakpoint {
public:
    Breakpoint(pid_t pid, void* addr)
        : m_pid(pid), m_addr(addr), m_enabled(false), m_saved_data(0) {}

    void enable() {
        // Save the original instruction at the address
        m_saved_data = ptrace(PTRACE_PEEKTEXT, m_pid, m_addr, nullptr);
        
        // Replace it with the INT3 (breakpoint) instruction (0xCC in x86-64)
        ptrace(PTRACE_POKETEXT, m_pid, m_addr, (m_saved_data & ~0xFF) | 0xCC);
        
        m_enabled = true;
    }

    void disable() {
        // Restore the original instruction at the address
        ptrace(PTRACE_POKETEXT, m_pid, m_addr, m_saved_data);
        m_enabled = false;
    }

    bool is_enabled() const { return m_enabled; }

private:
    pid_t m_pid;        // Process ID of the target program
    void* m_addr;       // Address of the breakpoint
    bool m_enabled;     // Is the breakpoint enabled?
    long m_saved_data;  // The original instruction data
};
